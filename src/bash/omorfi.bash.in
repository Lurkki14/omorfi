#!/bin/bash
# omorfi bash API
omorfiapi=@PACKAGE_VERSION@
# this is the order of dirs
if test -n $OMORFI_PATH ; then
    omorfipath=$OMORFI_PATH
fi
python=@PYTHON@
prefix=@prefix@
PYTHONPATH=$PYTHONPATH:@pythondir@
omorfidir="$prefix/share/omorfi"
hfstproc=@HPROC@
hfstlookup=@HLOOKUP@
lookupflags="-x -t 15 -p"
cgproc=@CGPROC@
hfstospell=@HOSPELL@
homeomorfidir="$HOME/.omorfi"
localomorfidir0=.
localomorfidir1=generated
localomorfidir2=src/generated
localomorfidir3=../src/generated
relomorfidir=$(dirname $0)/../share/omorfi

function python_wrap() {
    PYTHONPATH=$PYTHONPATH $@
}

## args:
## - $1: function
function omorfi_find() {
    for d in $omorfipath $omorfidir $homeomorfidir \
        $localomorfidir0 $localomorfidir1 $localomorfidir2 $localomorfidir3 \
        $relomorfidir ; do
        if test $# = 0 ; then
            if test -d "$d" ; then
                echo "$d"
                break
            fi
        elif test $# = 1 ; then
            func=$1
            if test x$func = xvislcg ; then
                if test -f "$d/omorfi.cg3bin" ; then
                    echo "$d/omorfi.cg3bin"
                    break
                fi
            elif test x$func = xspeller ; then
                if test -f "$d/speller-omorfi.zhfst" ; then
                    echo "$d/speller-omorfi.zhfst"
                    break
                fi
            else
                if test -f "$d/omorfi.$func.hfst" ; then
                    echo "$d/omorfi.$func.hfst"
                    break
                fi
            fi
        fi
    done
}

function omorfi_find_help() {
    echo "Omorfi could not be located. Search path is:"
    for d in $omorfidir $homeomorfidir $localomorfidir0 $localomorfidir1 \
        $localomorfidir2 $localomorfidir3 ; do
        if test $# = 0 ; then
            echo $d
        elif test $# = 1 ; then
            func=$1
            echo "$d/omorfi.$func.hfst"
        fi
    done
    echo If you have omorfi installed or set up, it is possible that this
    echo optional feature was disabled at build time.
    exit 1
}

function apertium_cleanup() {
    if type -p apertium-destxt > /dev/null ; then
        apertium-destxt
    elif type -p sed > /dev/null ; then
        sed -e 's/[]@<>^$/\\{}[]/\\\0/g'
    else
        cat
    fi
}

function omorfi_tokenise() {
    if test $# -lt 1 ; then
        omorfianalyser=$(omorfi_find "analyse")
    else
        omorfianalyser=$(omorfi_find $1)
    fi
    if test -z "$omorfianalyser" ; then
        omorfi_find_help "analyse"
    else
        if test $# -eq 2 ; then
            python_wrap omorfi-tokenise.py -a $omorfianalyser -O $2 \
                -x /tmp/omorfi.statlog
        else
            python_wrap omorfi-tokenise.py -a $omorfianalyser \
                -x /tmp/omorfi.statlog
        fi
    fi
}

function omorfi_analyse_text() {
    if test $# -lt 1 ; then
        omorfianalyser=$(omorfi_find "analyse")
    else
        omorfianalyser=$(omorfi_find $1)
    fi
    if test -z "$omorfianalyser" ; then
        omorfi_find_help "analyse"
    else
        apertium_cleanup |\
            sed -e 's/\.\[\]//g' |\
            $hfstproc -x "$omorfianalyser"
    fi
}

function omorfi_conllu() {
    if test $# -lt 1 ; then
        omorfianalyser=$(omorfi_find "analyse")
        dict=analyse
    else
        omorfianalyser=$(omorfi_find $1)
        dict=$1
    fi
    if test -z "$omorfianalyser" ; then
        omorfi_find_help "analyse"
    else
        omorfi_tokenise $dict conllu |\
            python_wrap omorfi-conllu.py -a $omorfianalyser
    fi
}

function omorfi_factorise() {
    omorfisegmenter=$(omorfi_find "segmenter")
    if test $# -lt 1 ; then
        omorfianalyser=$(omorfi_find "analyse")
        dict=analyse
    else
        omorfianalyser=$(omorfi_find $1)
        dict=$1
    fi
    if test -z "$omorfianalyser" ; then
        omorfi_find_help "analyse"
    elif test -z "$omorfisegmenter" ; then
        omorfi_find_help "segmenter"
    else
        omorfi_tokenise $dict |\
            python_wrap omorfi-factorise.py -a $omorfianalyser\
                -s $omorfisegmenter
    fi
}

function omorfi_freq_evals() {
    if test $# -lt 1 ; then
        omorfianalyser=$(omorfi_find "analyse")
        dict=analyse
    else
        omorfianalyser=$(omorfi_find $1)
        dict=$1
    fi
    if test -z "$omorfianalyser" ; then
        omorfi_find_help "analyse"
    else
        omorfi_tokenise $dict |\
            tr -s ' ' '\n' |\
            sort | uniq -c | sort -nr |\
            python_wrap omorfi-freq-evals.py -a $omorfianalyser 
    fi
}

function omorfi_ftb3() {
    if test $# -lt 1 ; then
        omorfianalyser=$(omorfi_find "analyse")
        dict=analyse
    else
        omorfianalyser=$(omorfi_find $1)
        dict=$1
    fi
    if test -z "$omorfianalyser" ; then
        omorfi_find_help "analyse"
    else
        omorfi_tokenise $dict ftb3 |\
            python_wrap omorfi-ftb3.py -a $omorfianalyser 
    fi
}

function omorfi_analyse_tokens() {
    if test $# -lt 1 ; then
        omorfianalyser=$(omorfi_find "analyse")
    else
        omorfianalyser=$(omorfi_find $1)
    fi
    if test -z "$omorfianalyser" ; then
        omorfi_find_help "analyse"
    else
        $hfstlookup $lookupflags "$omorfianalyser"
    fi
}

function omorfi_vislcg() {
    if test $# -lt 1 ; then
        omorfianalyser=$(omorfi_find "analyse")
    else
        omorfianalyser=$(omorfi_find $1)
    fi
    if test -z "$omorfianalyser" ; then
        omorfi_find_help $1
    fi
    python_wrap omorfi-vislcg.py -a $omorfianalyser
}

function omorfi_disambiguate_text() {
    omorficg=$(omorfi_find vislcg)
    if test -z "$omorficg" ; then
        omorfi_find_help vislcg
    fi
    omorfi_vislcg $1 |
        $cgproc -f 0 "$omorficg"
}

function omorfi_generate() {
    if test $# -lt 1 ; then
        omorfianalyser=$(omorfi_find "generate")
    fi
    if test -z "$omorfianalyser" ; then
        omorfi_find_help "generate"
    else
        $hfstlookup $lookupflags "$omorfianalyser"
    fi
}


function omorfi_hyphenate() {
    if test $# -eq 1 ; then
        hyphen=$1
    else
        hyphen="-"
    fi
    omorfianalyser=$(omorfi_find "hyphenate")
    if test -z "$omorfianalyser" ; then
        omorfi_find_help "hyphenate"
    else
        $hfstlookup $lookupflags "$omorfianalyser" |\
            sed -e "s/-1/$hyphen/g" -e "s/-2/$hyphen/g" -e "s/-3/$hyphen/g" \
            -e "s/-4/$hyphen/g"
    fi
}

function omorfi_segment() {
    omorfisegmenter=$(omorfi_find "segment")
    omorfilabelser=$(omorfi_find "labelsegment")

    if test -z "$omorfisegmenter" ; then
        omorfi_find_help "segment"
    elif test -z "$omorfilabelser" ; then
        omorfi_find_help "labelsegment"
    else
        if test -$# -eq 1 ; then
            python_wrap omorfi-segment.py -s "$omorfisegmenter" \
                -S "$omorfilabelser" \
                --segment-marker $1 -O segments
        else
            python_wrap omorfi-segment.py -s "$omorfisegmenter" \
                -S "$omorfilabelser" \
                -O segments
        fi
    fi
}

function omorfi_spell() {
    omorfispeller=$(omorfi_find "speller")
    if test -z "$omorfispeller" ; then
        omorfi_find_help "speller"
    else
        $hfstospell -S "$omorfidir/speller-omorfi.zhfst"
    fi
}


